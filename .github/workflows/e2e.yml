name: End to End Tests

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "sha"
        required: true
      ref:
        description: "ref"
        required: true
      urls:
        description: "urls"
        required: true
      pr_number:
        description: "Pull Request number"
        required: true
jobs:
  e2e_tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      pull-requests: write
      statuses: write
    steps:
      - name: Create Status Check
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'E2E Tests',
              head_sha: '${{ inputs.sha }}',
              status: 'in_progress',
              started_at: new Date().toISOString()
            })

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Save E2E URLs
        working-directory: examples/e2e
        run: |
          echo "${{ inputs.urls }}" | base64 -d > app-configs.json

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install Dependencies
        working-directory: ./examples/e2e
        run: |
          pnpm install
          pnpm exec playwright install --with-deps

      - name: Print app configs
        working-directory: examples/e2e
        run: |
          cat app-configs.json

      - name: Run Tests
        id: run_tests
        working-directory: ./examples/e2e
        continue-on-error: true
        run: |
          pnpm playwright test
        env:
          GITHUB_SHA: ${{ github.sha }}
          COPILOT_CLOUD_PROD_RUNTIME_URL: "https://api.cloud.copilotkit.ai/copilotkit/v1"
          COPILOT_CLOUD_PROD_PUBLIC_API_KEY: ${{ secrets.COPILOT_CLOUD_PROD_PUBLIC_API_KEY }}
          COPILOT_CLOUD_STAGING_RUNTIME_URL: "https://api.cloud.stagingcopilotkit.ai/copilotkit/v1"
          COPILOT_CLOUD_STAGING_PUBLIC_API_KEY: ${{ secrets.COPILOT_CLOUD_STAGING_PUBLIC_API_KEY }}

      - name: Delete a comment
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ inputs.pr_number }}
          comment-tag: test-run-status-update
          mode: delete

      - name: Comment post-deployment
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ inputs.pr_number }}
          comment-tag: test-run-status-update
          file-path: ./examples/e2e/test-results/test-run-comment.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            examples/e2e/playwright-report/
            examples/e2e/test-results/
          retention-days: 30

      - name: Update Status Check
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let summary = 'Test run completed.';
            let failedTests = 0;
            try {
              const results = JSON.parse(
                fs.readFileSync('./examples/e2e/test-results/test-results.json', 'utf8')
              );
              
              const stats = results.stats;
              failedTests = stats.unexpected;
              
              // Find flaky and failed test details
              const allSpecs = results.suites
                .flatMap(s => s.suites || [])
                .flatMap(s => s.suites || [])
                .flatMap(s => s.specs || []);
              
              const flakySpecs = allSpecs
                .filter(spec => spec.tests[0].status === 'flaky')
                .map(spec => {
                  const test = spec.tests[0];
                  const firstFailure = test.results.find(r => r.status === 'failed');
                  return {
                    title: spec.title,
                    error: firstFailure?.error?.message?.split('\n')[0] || 'Test was flaky',
                    retries: test.results.length - 1
                  };
                });
              
              const failedSpecs = allSpecs
                .filter(spec => !spec.ok)
                .map(spec => {
                  const test = spec.tests[0];
                  const error = test.results[0].error;
                  return {
                    title: spec.title,
                    error: error.message.split('\n')[0]
                  };
                });
              
              // Determine status and create summary
              if (failedTests > 0) {
                summary = [
                  `❌ Tests failed: ${failedTests} of ${stats.expected + stats.unexpected} tests failed`,
                  '',
                  'Failed Tests:',
                  ...failedSpecs.map(f => `- ${f.title}\n  Error: ${f.error}`),
                  '',
                  `Duration: ${Math.round(stats.duration / 1000)}s`,
                  '',
                  'See PR comment for full details.'
                ].join('\n');
              } else if (stats.flaky > 0) {
                summary = [
                  `⚠️ Tests completed with flaky behavior: ${stats.flaky} of ${stats.expected} tests required retries`,
                  '',
                  'Flaky Tests:',
                  ...flakySpecs.map(f => `- ${f.title}\n  Required ${f.retries} retries to pass\n  First error: ${f.error}`),
                  '',
                  `Duration: ${Math.round(stats.duration / 1000)}s`,
                  '',
                  'See PR comment for full details.'
                ].join('\n');
              } else {
                summary = `✅ All ${stats.expected} tests passed in ${Math.round(stats.duration / 1000)}s`;
              }
            } catch (error) {
              summary = 'Failed to read test results.';
              console.error('Error reading test results:', error);
              failedTests = 1;
            }

            let conclusion = 'success';
            let title = '✅ E2E Tests Passed';

            if (failedTests > 0) {
              conclusion = 'failure';
              title = '❌ E2E Tests Failed';
            } else if (stats?.flaky > 0) {
              conclusion = 'neutral';
              title = '⚠️ E2E Tests Passed with Flaky Tests';
            }

            return github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'E2E Tests',
              head_sha: '${{ inputs.sha }}',
              conclusion: conclusion,
              output: {
                title: title,
                summary: summary
              }
            })
