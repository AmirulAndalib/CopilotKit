from crewai import Agent, Crew, Process, Task, LLM
import os
from dotenv import load_dotenv
load_dotenv()
class DocumentGenerationCrew:
    def __init__(self, topic: str):
        self.topic = topic


    llm = LLM(
        model="gpt-4o-mini",
        temperature=0.0,
        api_key=os.getenv("OPENAI_API_KEY")
    )


    def create_researcher(self) -> Agent:
        return Agent(
            role="Research Specialist",
            goal="Conduct thorough research on the given topic and create a comprehensive markdown document",
            backstory="You are an expert researcher with a keen eye for detail and the ability to organize information effectively.",
            verbose=True,
            llm=self.llm
        )

    def create_summarizer(self) -> Agent:
        return Agent(
            role="Content Summarizer",
            goal="Create a concise 3-sentence summary of the generated document",
            backstory="You are a skilled content summarizer who provides a concise summary of the document generated by the researcher.",
            verbose=True,
            llm=self.llm
        )

    def create_tasks(self, researcher: Agent, summarizer: Agent) -> list[Task]:
        research_task = Task(
            description=f"Research and create a comprehensive markdown document about {self.topic}. "
                       f"The document should be well-structured with a proper heading. "
                       f"Include relevant information and examples",
            agent=researcher,
            expected_output="A formatted markdown document containing comprehensive information about the topic",
            llm=self.llm
        )

        summarize_task = Task(
            description="Create a concise 3-sentence summary of the generated document. ",
            agent=summarizer,
            expected_output="A 3-sentence summary of the document that says that the document related to the specific topic is generated",
            llm=self.llm
        )

        return [research_task, summarize_task]
