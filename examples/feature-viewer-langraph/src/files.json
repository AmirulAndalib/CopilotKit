{
  "agentic_chat": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nA simple agentic chat flow using LangGraph instead of CrewAI.\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional\n\n# Updated imports for LangGraph\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END, START\nfrom langgraph.checkpoint.memory import MemorySaver\n# Updated imports for CopilotKit\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langchain import copilotkit_customize_config\nfrom langgraph.types import Command\nfrom typing_extensions import Literal\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    Here we define the state of the agent\n\n    In this instance, we're inheriting from CopilotKitState, which will bring in\n    the CopilotKitState fields. We're also adding a custom field, `language`,\n    which will be used to set the language of the agent.\n    \"\"\"\n\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    \"\"\"\n    Standard chat node based on the ReAct design pattern. It handles:\n    - The model to use (and binds in CopilotKit actions and the tools defined above)\n    - The system prompt\n    - Getting a response from the model\n    - Handling tool calls\n\n    For more about the ReAct design pattern, see: \n    https://www.perplexity.ai/search/react-agents-NcXLQhreS0WDzpVaS4m9Cg\n    \"\"\"\n    \n    # 1. Define the model\n    model = ChatOpenAI(model=\"gpt-4o\")\n    \n    # Define config for the model\n    if config is None:\n        config = RunnableConfig(recursion_limit=25)\n    else:\n        # Use CopilotKit's custom config functions to properly set up streaming\n        config = copilotkit_customize_config(config)\n\n    # 2. Bind the tools to the model\n    model_with_tools = model.bind_tools(\n        [\n            *state[\"copilotkit\"][\"actions\"],\n            # your_tool_here\n        ],\n\n        # 2.1 Disable parallel tool calls to avoid race conditions,\n        #     enable this for faster performance if you want to manage\n        #     the complexity of running tool calls in parallel.\n        parallel_tool_calls=False,\n    )\n\n    # 3. Define the system message by which the chat model will be run\n    system_message = SystemMessage(\n        content=f\"You are a helpful assistant. .\"\n    )\n\n    # 4. Run the model to generate a response\n    response = await model_with_tools.ainvoke([\n        system_message,\n        *state[\"messages\"],\n    ], config)\n\n    # 6. We've handled all tool calls, so we can end the graph.\n    return Command(\n        goto=END,\n        update={\n            \"messages\": response\n        }\n    )\n\n# Define a new graph\nworkflow = StateGraph(AgentState)\nworkflow.add_node(\"chat_node\", chat_node)\nworkflow.set_entry_point(\"chat_node\")\n\n# Add explicit edges, matching the pattern in other examples\nworkflow.add_edge(START, \"chat_node\")\nworkflow.add_edge(\"chat_node\", END)\n\nmemory = MemorySaver()\n# Compile the graph\nagentic_chat_graph = workflow.compile(\n    checkpointer=memory\n)",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst AgenticChat: React.FC = () => {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_COPILOT_CLOUD_API_KEY}\n      showDevConsole={false}\n      agent=\"agentic_chat\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  const [background, setBackground] = useState<string>(\"#fefefe\");\n\n  useCopilotAction({\n    name: \"change_background\",\n    description:\n      \"Change the background color of the chat. Can be anything that the CSS background attribute accepts. Regular colors, linear of radial gradients etc.\",\n    parameters: [\n      {\n        name: \"background\",\n        type: \"string\",\n        description: \"The background. Prefer gradients.\",\n      },\n    ],\n    handler: ({ background }) => {\n      setBackground(background);\n    },\n  });\n\n  return (\n    <div\n      className=\"flex justify-center items-center h-full w-full\"\n      style={{ background }}\n    >\n      <div className=\"w-8/10 h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. Want to chat?\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AgenticChat;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🤖 Agentic Chat with Frontend Tools\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic chat** capabilities with **frontend tool integration**:\n1. **Natural Conversation**: Chat with your Copilot in a familiar chat interface\n2. **Frontend Tool Execution**: The Copilot can directly interacts with your UI by calling frontend functions\n3. **Seamless Integration**: Tools defined in the frontend and automatically discovered and made available to the agent\n\n## How to Interact\n\nTry asking your Copilot to:\n- \"Can you change the background color to something more vibrant?\"\n- \"Make the background a blue to purple gradient\"\n- \"Set the background to a sunset-themed gradient\"\n- \"Change it back to a simple light color\"\n\nYou can also chat about other topics - the agent will respond conversationally while having the ability to use your UI tools when appropriate.\n\n## ✨ Frontend Tool Integration in Action\n\n**What's happening technically:**\n- The React component defines a frontend function using `useCopilotAction`\n- CopilotKit automatically exposes this function to the agent\n- When you make a request, the agent determines whether to use the tool\n- The agent calls the function with the appropriate parameters\n- The UI immediately updates in response\n\n**What you'll see in this demo:**\n- The Copilot understands requests to change the background\n- It generates CSS values for colors and gradients\n- When it calls the tool, the background changes instantly\n- The agent provides a conversational response about the changes it made\n\nThis technique of exposing frontend functions to your Copilot can be extended to any UI manipulation you want to enable, from theme changes to data filtering, navigation, or complex UI state management! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "agentic_generative_ui": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating agentic generative UI using LangGraph.\n\"\"\"\n\nimport json\nimport asyncio\nfrom typing import Dict, List, Any, Optional, Literal\n# LangGraph imports\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END, START\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.types import Command\n\n# CopilotKit imports\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import (\n    copilotkit_customize_config,\n    copilotkit_emit_state\n)\n\n# OpenAI imports\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\n\n# This tool simulates performing a task on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nPERFORM_TASK_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_task_steps_generative_ui\",\n        \"description\": \"Make up 10 steps (only a couple of words per step) that are required for a task. The step should be in gerund form (i.e. Digging hole, opening door, ...)\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\n                                \"type\": \"string\",\n                                \"description\": \"The text of the step in gerund form\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"pending\"],\n                                \"description\": \"The status of the step, always 'pending'\"\n                            }\n                        },\n                        \"required\": [\"description\", \"status\"]\n                    },\n                    \"description\": \"An array of 10 step objects, each containing text and status\"\n                }\n            },\n            \"required\": [\"steps\"]\n        }\n    }\n}\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    Here we define the state of the agent\n\n    In this instance, we're inheriting from CopilotKitState, which will bring in\n    the CopilotKitState fields. We're also adding a custom field, `steps`,\n    which will be used to store the steps of the task.\n    \"\"\"\n    steps: List[dict] = []\n\n\nasync def start_flow(state: AgentState, config: RunnableConfig):\n    \"\"\"\n    This is the entry point for the flow.\n    \"\"\"\n\n    if \"steps\" not in state:\n        state[\"steps\"] = []\n\n    return Command(\n        goto=\"chat_node\",\n        update={\n            \"messages\": state[\"messages\"],\n            \"steps\": state[\"steps\"]\n        }\n    )\n\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    \"\"\"\n    Standard chat node.\n    \"\"\"\n    system_prompt = \"\"\"\n    You are a helpful assistant assisting with any task. \n    When asked to do something, you MUST call the function `generate_task_steps_generative_ui`\n    that was provided to you.\n    If you called the function, you MUST NOT repeat the steps in your next response to the user.\n    Just give a very brief summary (one sentence) of what you did with some emojis. \n    Always say you actually did the steps, not merely generated them.\n    \"\"\"\n\n    # Define the model\n    model = ChatOpenAI(model=\"gpt-4o\")\n    \n    # Define config for the model with emit_intermediate_state to stream tool calls to frontend\n    if config is None:\n        config = RunnableConfig(recursion_limit=25)\n    \n    # Use CopilotKit's custom config to set up streaming for the generate_task_steps_generative_ui tool\n    # This is equivalent to copilotkit_predict_state in the CrewAI version\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[{\n            \"state_key\": \"steps\",\n            \"tool\": \"generate_task_steps_generative_ui\",\n            \"tool_argument\": \"steps\",\n        }],\n    )    \n\n    # Bind the tools to the model\n    model_with_tools = model.bind_tools(\n        [\n            # *state[\"copilotkit\"][\"actions\"]\n            PERFORM_TASK_TOOL\n        ],\n        # Disable parallel tool calls to avoid race conditions\n        parallel_tool_calls=False,\n    )\n\n    # Run the model to generate a response\n    response = await model_with_tools.ainvoke([\n        SystemMessage(content=system_prompt),\n        *state[\"messages\"],\n    ], config)\n\n    messages = state[\"messages\"] + [response]\n\n    # Extract any tool calls from the response\n    if hasattr(response, \"tool_calls\") and response.tool_calls and len(response.tool_calls) > 0:\n        tool_call = response.tool_calls[0]\n        \n        # Handle tool_call as a dictionary rather than an object\n        if isinstance(tool_call, dict):\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"name\"]\n            tool_call_args = tool_call[\"args\"]\n        else:\n            # Handle as an object (backward compatibility)\n            tool_call_id = tool_call.id\n            tool_call_name = tool_call.name\n            tool_call_args = tool_call.args\n\n        if tool_call_name == \"generate_task_steps_generative_ui\":\n            steps = [{\"description\": step[\"description\"], \"status\": step[\"status\"]} for step in tool_call_args[\"steps\"]]\n            \n            # Add the tool response to messages\n            tool_response = {\n                \"role\": \"tool\",\n                \"content\": \"Steps executed.\",\n                \"tool_call_id\": tool_call_id\n            }\n\n            messages = messages + [tool_response]\n\n            # Return Command to route to simulate_task_node\n            for i, step in enumerate(steps):\n        # simulate executing the step\n                await asyncio.sleep(1)\n                steps[i][\"status\"] = \"completed\"\n                # Update the state with the completed step - using config as first parameter\n                state[\"steps\"] = steps\n                await copilotkit_emit_state(config, state)\n            \n            return Command(\n                goto='start_flow',\n                update={\n                    \"messages\": messages,\n                    \"steps\": state[\"steps\"]\n                }\n            )\n    # If no tool was called, go to end (equivalent to \"route_end\" in CrewAI)\n    return Command(\n        goto=END,\n        update={\n            \"messages\": messages,\n            \"steps\": state[\"steps\"]\n        }\n    )\n\n\n# Define the graph\nworkflow = StateGraph(AgentState)\n\n# Add nodes\nworkflow.add_node(\"start_flow\", start_flow)\nworkflow.add_node(\"chat_node\", chat_node)\n\n# Add edges (equivalent to the routing in CrewAI)\nworkflow.set_entry_point(\"start_flow\")\nworkflow.add_edge(START, \"start_flow\")\nworkflow.add_edge(\"start_flow\", \"chat_node\")\nworkflow.add_edge(\"chat_node\", END)\n\n# Create memory saver\nmemory = MemorySaver()\n\n# Compile the graph\ngraph = workflow.compile(\n    checkpointer=memory\n)\n\n# For compatibility with server code that might expect this clas",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCoAgentStateRender } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst AgenticGenerativeUI: React.FC = () => {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_COPILOT_CLOUD_API_KEY}\n      showDevConsole={false}\n      agent=\"agentic_generative_ui\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\ninterface AgentState {\n  steps: {\n    description: string;\n    status: \"pending\" | \"completed\";\n  }[];\n}\n\nconst Chat = () => {\n  useCoAgentStateRender<AgentState>({\n    name: \"agentic_generative_ui\",\n    render: ({ state }) => {\n      if (!state.steps || state.steps.length === 0) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex\">\n          <div className=\"bg-gray-100 rounded-lg w-[500px] p-4 text-black space-y-2\">\n            {state.steps.map((step, index) => {\n              if (step.status === \"completed\") {\n                return (\n                  <div key={index} className=\"text-sm\">\n                    ✓ {step.description}\n                  </div>\n                );\n              } else if (\n                step.status === \"pending\" &&\n                index === state.steps.findIndex((s) => s.status === \"pending\")\n              ) {\n                return (\n                  <div\n                    key={index}\n                    className=\"text-3xl font-bold text-slate-700\"\n                  >\n                    <Spinner />\n                    {step.description}\n                  </div>\n                );\n              } else {\n                return (\n                  <div key={index} className=\"text-sm\">\n                    <Spinner />\n                    {step.description}\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-screen w-screen\">\n      <div className=\"w-8/10 h-8/10\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. I can do anything, just ask!\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 size-3 animate-spin text-slate-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default AgenticGenerativeUI;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🚀 Agentic Generative UI Task Executor\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic generative UI** capabilities:\n1. **Real-time Status Updates**: The Copilot provides live feedback as it works through complex tasks\n2. **Long-running Task Execution**: See how agents can handle extended processes with continuous feedback\n3. **Dynamic UI Generation**: The interface updates in real-time to reflect the agent's progress\n\n## How to Interact\n\nSimply ask your Copilot to perform any moderately complex task:\n- \"Make me a sandwich\"\n- \"Plan a vacation to Japan\"\n- \"Create a weekly workout routine\"\n\nThe Copilot will break down the task into steps and begin \"executing\" them, providing real-time status updates as it progresses.\n\n## ✨ Agentic Generative UI in Action\n\n**What's happening technically:**\n- The agent analyzes your request and creates a detailed execution plan\n- Each step is processed sequentially with realistic timing\n- Status updates are streamed to the frontend using CopilotKit's streaming capabilities\n- The UI dynamically renders these updates without page refreshes\n- The entire flow is managed by the agent, requiring no manual intervention\n\n**What you'll see in this demo:**\n- The Copilot breaks your task into logical steps\n- A status indicator shows the current progress\n- Each step is highlighted as it's being executed\n- Detailed status messages explain what's happening at each moment\n- Upon completion, you receive a summary of the task execution\n\nThis pattern of providing real-time progress for long-running tasks is perfect for scenarios where users benefit from transparency into complex processes - from data analysis to content creation, system configurations, or multi-stage workflows! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "human_in_the_loop": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nA LangGraph implementation of the human-in-the-loop agent.\n\"\"\"\n\nimport json\nfrom typing import Dict, List, Any\n\n# LangGraph imports\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END, START\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.types import Command, interrupt\n\n# CopilotKit imports\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import copilotkit_customize_config, copilotkit_emit_state, copilotkit_interrupt\n\n# LLM imports\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\n\nDEFINE_TASK_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_task_steps\",\n        \"description\": \"Make up 10 steps (only a couple of words per step) that are required for a task. The step should be in imperative form (i.e. Dig hole, Open door, ...)\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"steps\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\n                                \"type\": \"string\",\n                                \"description\": \"The text of the step in imperative form\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"enabled\"],\n                                \"description\": \"The status of the step, always 'enabled'\"\n                            }\n                        },\n                        \"required\": [\"description\", \"status\"]\n                    },\n                    \"description\": \"An array of 10 step objects, each containing text and status\"\n                }\n            },\n            \"required\": [\"steps\"]\n        }\n    }\n}\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    The state of the agent.\n    It inherits from CopilotKitState which provides the basic fields needed by CopilotKit.\n    \"\"\"\n    steps: List[Dict[str, str]] = []\n\nasync def start_flow(state: Dict[str, Any], config: RunnableConfig):\n    \"\"\"\n    This is the entry point for the flow.\n    \"\"\"\n    # Initialize steps list if not exists\n    if \"steps\" not in state:\n        state[\"steps\"] = []\n    \n    return Command(\n        goto=\"chat_node\",\n        update={\n            \"messages\": state[\"messages\"],\n            \"steps\": state[\"steps\"],\n        }\n    )\n\n\nasync def chat_node(state: Dict[str, Any], config: RunnableConfig):\n    \"\"\"\n    Standard chat node where the agent processes messages and generates responses.\n    If task steps are defined, the user can enable/disable them using interrupts.\n    \"\"\"\n    system_prompt = \"\"\"\n    You are a helpful assistant that can perform any task.\n    You MUST call the `generate_task_steps` function when the user asks you to perform a task.\n    When the function `generate_task_steps` is called, the user will decide to enable or disable steps.\n    After the user has decided which steps to perform, provide a textual description of how you are performing the task.\n    If the user has disabled a step, you are not allowed to perform that step.\n    However, you should find a creative workaround to perform the task, and if an essential step is disabled, you can even use\n    some humor in the description of how you are performing the task.\n    Don't just repeat a list of steps, come up with a creative but short description (3 sentences max) of how you are performing the task.\n    \"\"\"\n\n    # Define the model\n    model = ChatOpenAI(model=\"gpt-4o\")\n    \n    # Define config for the model\n    if config is None:\n        config = RunnableConfig(recursion_limit=25)\n    \n    # Use CopilotKit's custom config functions to properly set up streaming for the steps state\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[{\n            \"state_key\": \"steps\",\n            \"tool\": \"generate_task_steps\",\n            \"tool_argument\": \"steps\"\n        }],\n    )\n\n    # Bind the tools to the model\n    model_with_tools = model.bind_tools(\n        [\n            *state[\"copilotkit\"][\"actions\"],\n            DEFINE_TASK_TOOL\n        ],\n        # Disable parallel tool calls to avoid race conditions\n        parallel_tool_calls=False,\n    )\n\n    # Run the model and generate a response\n    response = await model_with_tools.ainvoke([\n        SystemMessage(content=system_prompt),\n        *state[\"messages\"],\n    ], config)\n\n    # Update messages with the response\n    messages = state[\"messages\"] + [response]\n    \n    # Handle tool calls\n    if hasattr(response, \"tool_calls\") and response.tool_calls and len(response.tool_calls) > 0:\n        tool_call = response.tool_calls[0]\n        \n        # Extract tool call information\n        if hasattr(tool_call, \"id\"):\n            tool_call_id = tool_call.id\n            tool_call_name = tool_call.name\n            tool_call_args = tool_call.args if not isinstance(tool_call.args, str) else json.loads(tool_call.args)\n        else:\n            tool_call_id = tool_call.get(\"id\", \"\")\n            tool_call_name = tool_call.get(\"name\", \"\")\n            args = tool_call.get(\"args\", {})\n            tool_call_args = args if not isinstance(args, str) else json.loads(args)\n\n        if tool_call_name == \"generate_task_steps\":\n            # Get the steps from the tool call\n            steps_raw = tool_call_args.get(\"steps\", [])\n            \n            # Set initial status to \"enabled\" for all steps\n            steps_data = []\n            \n            # Handle different potential formats of steps data\n            if isinstance(steps_raw, list):\n                for step in steps_raw:\n                    if isinstance(step, dict) and \"description\" in step:\n                        steps_data.append({\n                            \"description\": step[\"description\"],\n                            \"status\": \"enabled\"\n                        })\n                    elif isinstance(step, str):\n                        steps_data.append({\n                            \"description\": step,\n                            \"status\": \"enabled\"\n                        })\n            \n            # If no steps were processed correctly, create some dummy steps for debugging\n            if not steps_data:\n                steps_data = []\n            \n            # Update steps in state and emit to frontend\n            state[\"steps\"] = steps_data\n            \n            # Add a tool response to satisfy OpenAI's requirements\n            tool_response = {\n                \"role\": \"tool\",\n                \"content\": \"Task steps generated.\",\n                \"tool_call_id\": tool_call_id\n            }\n            \n            messages = messages + [tool_response]\n\n            # Move to the process_steps_node which will handle the interrupt and final response\n            return Command(\n                goto=\"process_steps_node\",\n                update={\n                    \"messages\": messages,\n                    \"steps\": state[\"steps\"],\n                }\n            )\n    \n    # If no tool calls or not generate_task_steps, return to END with the updated messages\n    return Command(\n        goto=END,\n        update={\n            \"messages\": messages,\n            \"steps\": state[\"steps\"],\n        }\n    )\n\n\nasync def process_steps_node(state: Dict[str, Any], config: RunnableConfig):\n    \"\"\"\n    This node handles the user interrupt for step customization and generates the final response.\n    \"\"\"\n\n    # Check if we already have a user_response in the state\n    # This happens when the node restarts after an interrupt\n    if \"user_response\" in state and state[\"user_response\"]:\n        user_response = state[\"user_response\"]\n    else:\n        # Use LangGraph interrupt to get user input on steps\n        # This will pause execution and wait for user input in the frontend\n        user_response = interrupt({\"steps\": state[\"steps\"]})\n        # Store the user response in state for when the node restarts\n        state[\"user_response\"] = user_response\n    \n    # Generate the creative completion response\n    final_prompt = \"\"\"\n    Provide a textual description of how you are performing the task.\n    If the user has disabled a step, you are not allowed to perform that step.\n    However, you should find a creative workaround to perform the task, and if an essential step is disabled, you can even use\n    some humor in the description of how you are performing the task.\n    Don't just repeat a list of steps, come up with a creative but short description (3 sentences max) of how you are performing the task.\n    \"\"\"\n    \n    final_response = await ChatOpenAI(model=\"gpt-4o\").ainvoke([\n        SystemMessage(content=final_prompt),\n        {\"role\": \"user\", \"content\": user_response}\n    ], config)\n\n    # Add the final response to messages\n    messages = state[\"messages\"] + [final_response]\n    \n    # Clear the user_response from state to prepare for future interactions\n    if \"user_response\" in state:\n        state.pop(\"user_response\")\n    \n    # Return to END with the updated messages\n    return Command(\n        goto=END,\n        update={\n            \"messages\": messages,\n            \"steps\": state[\"steps\"],\n        }\n    )\n\n\n# Define the graph\nworkflow = StateGraph(AgentState)\n\n# Add nodes\nworkflow.add_node(\"start_flow\", start_flow)\nworkflow.add_node(\"chat_node\", chat_node)\nworkflow.add_node(\"process_steps_node\", process_steps_node)\n\n# Add edges\nworkflow.set_entry_point(\"start_flow\")\nworkflow.add_edge(START, \"start_flow\")\nworkflow.add_edge(\"start_flow\", \"chat_node\")\nworkflow.add_edge(\"chat_node\", \"process_steps_node\")\nworkflow.add_edge(\"chat_node\", END)\nworkflow.add_edge(\"process_steps_node\", END)\n\n# Create memory saver\nmemory = MemorySaver()\n\n# Compile the graph\nhuman_in_the_loop_graph = workflow.compile(\n    checkpointer=memory\n)\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useLangGraphInterrupt } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst HumanInTheLoop: React.FC = () => {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_COPILOT_CLOUD_API_KEY}\n      showDevConsole={false}\n      agent=\"human_in_the_loop\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  useLangGraphInterrupt({\n    render: ({ event, resolve }) => {\n      \n      // Ensure we have valid steps data\n      let initialSteps = [];\n      if (event.value && event.value.steps && Array.isArray(event.value.steps)) {\n        initialSteps = event.value.steps.map((step: any) => ({\n          description: typeof step === 'string' ? step : step.description || '',\n          status: (typeof step === 'object' && step.status) ? step.status : 'enabled'\n        }));\n      }\n      \n      const [localSteps, setLocalSteps] = useState<\n        {\n          description: string;\n          status: \"disabled\" | \"enabled\" | \"executing\";\n        }[]\n      >(initialSteps);\n\n      const handleCheckboxChange = (index: number) => {\n        setLocalSteps((prevSteps) =>\n          prevSteps.map((step, i) =>\n            i === index\n              ? {\n                  ...step,\n                  status: step.status === \"enabled\" ? \"disabled\" : \"enabled\",\n                }\n              : step\n          )\n        );\n      };\n\n      return (\n        <div className=\"flex flex-col gap-4 w-[500px] bg-gray-100 rounded-lg p-8 mb-4\">\n          <div className=\"text-black space-y-2\">\n            <h2 className=\"text-lg font-bold mb-4\">Select Steps</h2>\n            {localSteps.map((step, index) => (\n              <div key={index} className=\"text-sm flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={step.status === \"enabled\"}\n                  onChange={() => handleCheckboxChange(index)}\n                  className=\"mr-2\"\n                />\n                <span\n                  className={\n                    step.status !== \"enabled\" ? \"line-through\" : \"\"\n                  }\n                >\n                  {step.description}\n                </span>\n              </div>\n            ))}\n            <button\n              className=\"mt-4 bg-gradient-to-r from-purple-400 to-purple-600 text-white py-2 px-4 rounded cursor-pointer w-48 font-bold\"\n              onClick={() => {\n                const selectedSteps = localSteps\n                  .filter((step) => step.status === \"enabled\")\n                  .map((step) => step.description);\n                resolve(\"The user selected the following steps: \" + selectedSteps.join(\", \"));\n              }}\n            >\n              ✨ Perform Steps\n            </button>\n          </div>\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-screen w-screen\">\n      <div className=\"w-8/10 h-8/10\">\n        <CopilotChat\n          className=\"h-full rounded-lg\"\n          labels={{ initial: \"Hi, I'm an agent. I can do anything, just ask!\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 size-3 animate-spin text-slate-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n}\n\nexport default HumanInTheLoop;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n  background-color: #fff;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🤝 Human-in-the-Loop Task Planner\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **human-in-the-loop** capabilities:\n1. **Collaborative Planning**: The Copilot generates task steps and lets you decide which ones to perform\n2. **Interactive Decision Making**: Select or deselect steps to customize the execution plan\n3. **Adaptive Responses**: The Copilot adapts its execution based on your choices, even handling missing steps\n\n## How to Interact\n\nTry these steps to experience the demo:\n1. Ask your Copilot to help with a task, such as:\n   - \"Make me a sandwich\"\n   - \"Plan a weekend trip\"\n   - \"Organize a birthday party\"\n   - \"Start a garden\"\n\n2. Review the suggested steps provided by your Copilot\n\n3. Select or deselect steps using the checkboxes to customize the plan\n   - Try removing essential steps to see how the Copilot adapts!\n\n4. Click \"Execute Plan\" to see the outcome based on your selections\n\n## ✨ Human-in-the-Loop Magic in Action\n\n**What's happening technically:**\n- The agent analyzes your request and breaks it down into logical steps\n- These steps are presented to you through a dynamic UI component\n- Your selections are captured as user input\n- The agent considers your choices when executing the plan\n- The agent adapts to missing steps with creative problem-solving\n\n**What you'll see in this demo:**\n- The Copilot provides a detailed, step-by-step plan for your task\n- You have complete control over which steps to include\n- If you remove essential steps, the Copilot provides entertaining and creative workarounds\n- The final execution reflects your choices, showing how human input shapes the outcome\n- Each response is tailored to your specific selections\n\nThis human-in-the-loop pattern creates a powerful collaborative experience where both human judgment and AI capabilities work together to achieve better results than either could alone! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "shared_state": {
    "files": [
      {
        "name": "README.md",
        "content": "# 🍳 Shared State Recipe Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **shared state** functionality - a powerful feature that enables bidirectional data flow between:\n1. **Frontend → Agent**: UI controls update the agent's context in real-time\n2. **Agent → Frontend**: The Copilot's recipe creations instantly update the UI components\n\nIt's like having a cooking buddy who not only listens to what you want but also updates your recipe card as you chat - no refresh needed! ✨\n\n## How to Interact\n\nMix and match any of these parameters (or none at all - it's up to you!):\n- **Skill Level**: Beginner to expert 👨‍🍳\n- **Cooking Time**: Quick meals or slow cooking ⏱️\n- **Special Preferences**: Dietary needs, flavor profiles, health goals 🥗\n- **Ingredients**: Items you want to include 🧅🥩🍄\n- **Instructions**: Any specific steps\n\nThen chat with your Copilot chef with prompts like:\n- \"I'm a beginner cook. Can you make me a quick dinner?\"\n- \"I need something spicy with chicken that takes under 30 minutes!\"\n\n## ✨ Shared State Magic in Action\n\n**What's happening technically:**\n- The UI and Copilot agent share the same state object (**Agent State = UI State**)\n- Changes from either side automatically update the other\n- Neither side needs to manually request updates from the other\n\n**What you'll see in this demo:**\n- Set cooking time to 20 minutes in the UI and watch the Copilot immediately respect your time constraint\n- Add ingredients through the UI and see them appear in your recipe\n- When the Copilot suggests new ingredients, watch them automatically appear in the UI ingredients list\n- Change your skill level and see how the Copilot adapts its instructions in real-time\n\nThis synchronized state creates a seamless experience where the agent always has your current preferences, and any updates to the recipe are instantly reflected in both places.\n\nThis shared state pattern can be applied to any application where you want your UI and Copilot to work together in perfect harmony!\n",
        "path": "README.md",
        "language": "markdown"
      },
      {
        "name": "agent.py",
        "content": "\"\"\"\nA demo of shared state between the agent and CopilotKit using LangGraph.\n\"\"\"\n\nimport json\nfrom enum import Enum\nfrom typing import Dict, List, Any, Optional\n\n# LangGraph imports\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END, START\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.types import Command\n\n# CopilotKit imports\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import copilotkit_customize_config, copilotkit_emit_state\n\n# OpenAI imports\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\n\n\nclass SkillLevel(str, Enum):\n    \"\"\"\n    The level of skill required for the recipe.\n    \"\"\"\n    BEGINNER = \"Beginner\"\n    INTERMEDIATE = \"Intermediate\"\n    ADVANCED = \"Advanced\"\n\n\nclass SpecialPreferences(str, Enum):\n    \"\"\"\n    Special preferences for the recipe.\n    \"\"\"\n    HIGH_PROTEIN = \"High Protein\"\n    LOW_CARB = \"Low Carb\"\n    SPICY = \"Spicy\"\n    BUDGET_FRIENDLY = \"Budget-Friendly\"\n    ONE_POT_MEAL = \"One-Pot Meal\"\n    VEGETARIAN = \"Vegetarian\"\n    VEGAN = \"Vegan\"\n\n\nclass CookingTime(str, Enum):\n    \"\"\"\n    The cooking time of the recipe.\n    \"\"\"\n    FIVE_MIN = \"5 min\"\n    FIFTEEN_MIN = \"15 min\"\n    THIRTY_MIN = \"30 min\"\n    FORTY_FIVE_MIN = \"45 min\"\n    SIXTY_PLUS_MIN = \"60+ min\"\n\n\nGENERATE_RECIPE_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_recipe\",\n        \"description\": \" \".join(\"\"\"Using the existing (if any) ingredients and instructions, proceed with the recipe to finish it. the ingredients and instructions should be filled with the missing data to create a complete recipe.\n        Make sure the recipe is complete. ALWAYS provide the entire recipe, not just the changes.\"\"\".split()),\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"recipe\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"skill_level\": {\n                            \"type\": \"string\",\n                            \"enum\": [level.value for level in SkillLevel],\n                            \"description\": \"The skill level required for the recipe\"\n                        },\n                        \"special_preferences\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [preference.value for preference in SpecialPreferences]\n                            },\n                            \"description\": \"A list of special preferences for the recipe\"\n                        },\n                        \"cooking_time\": {\n                            \"type\": \"string\",\n                            \"enum\": [time.value for time in CookingTime],\n                            \"description\": \"The cooking time of the recipe\"\n                        },\n                        \"ingredients\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"icon\": {\"type\": \"string\"},\n                                    \"name\": {\"type\": \"string\"},\n                                    \"amount\": {\"type\": \"string\"}\n                                }\n                            },\n                            \"description\": \"Entire list of ingredients in the recipe, including the new ingredients and the ones that are already in the recipe\"\n                        },\n                        \"instructions\": {\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"description\": \"Entire list of instructions for the recipe, including the new instructions and the ones that are already there\"\n                        },\n                        \"changes\": {\n                            \"type\": \"string\",\n                            \"description\": \"A description of the changes made to the recipe\"\n                        }\n                    },\n                }\n            },\n            \"required\": [\"recipe\"]\n        }\n    }\n}\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    The state of the recipe.\n    \"\"\"\n    recipe: Optional[Dict[str, Any]] = None\n\n\nasync def start_flow(state: Dict[str, Any], config: RunnableConfig):\n    \"\"\"\n    This is the entry point for the flow.\n    \"\"\"\n    # Initialize recipe if not exists\n    if \"recipe\" not in state or state[\"recipe\"] is None:\n        state[\"recipe\"] = {\n            \"skill_level\": SkillLevel.BEGINNER.value,\n            \"special_preferences\": [],\n            \"cooking_time\": CookingTime.FIFTEEN_MIN.value,\n            \"ingredients\": [{\"icon\": \"🍴\", \"name\": \"Sample Ingredient\", \"amount\": \"1 unit\"}],\n            \"instructions\": [\"First step instruction\"]\n        }\n        # Emit the initial state to ensure it's properly shared with the frontend\n        await copilotkit_emit_state(config, state)\n    \n    return Command(\n        goto=\"chat_node\",\n        update={\n            \"messages\": state[\"messages\"],\n            \"recipe\": state[\"recipe\"]\n        }\n    )\n\n\nasync def chat_node(state: Dict[str, Any], config: RunnableConfig):\n    \"\"\"\n    Standard chat node.\n    \"\"\"\n    # Create a safer serialization of the recipe\n    recipe_json = \"No recipe yet\"\n    if \"recipe\" in state and state[\"recipe\"] is not None:\n        try:\n            recipe_json = json.dumps(state[\"recipe\"], indent=2)\n        except Exception as e:\n            recipe_json = f\"Error serializing recipe: {str(e)}\"\n    \n    system_prompt = f\"\"\"You are a helpful assistant for creating recipes. \n    This is the current state of the recipe: {recipe_json}\n    You can improve the recipe by calling the generate_recipe tool.\n    \n    IMPORTANT:\n    1. PRESERVE and BUILD UPON the existing ingredients and instructions rather than replacing them. But make sure the recipe is complete.\n    2. For ingredients, append new ingredients to the existing ones.\n    3. For instructions, append new steps to the existing ones.\n    4. 'ingredients' is always an array of objects with 'icon', 'name', and 'amount' fields\n    5. 'instructions' is always an array of strings\n    6. Make sure the recipe is complete.\n\n    If you have just created or modified the recipe, just answer in one sentence what you did. dont describe the recipe, just say what you did.\n    \"\"\"\n\n    # Define the model\n    model = ChatOpenAI(model=\"gpt-4o\")\n    \n    # Define config for the model\n    if config is None:\n        config = RunnableConfig(recursion_limit=25)\n    \n    # Use CopilotKit's custom config functions to properly set up streaming for the recipe state\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[{\n            \"state_key\": \"recipe\",\n            \"tool\": \"generate_recipe\",\n            \"tool_argument\": \"recipe\"\n        }],\n    )\n\n    # Bind the tools to the model\n    model_with_tools = model.bind_tools(\n        [\n            *state[\"copilotkit\"][\"actions\"],\n            GENERATE_RECIPE_TOOL\n        ],\n        # Disable parallel tool calls to avoid race conditions\n        parallel_tool_calls=False,\n    )\n\n    # Run the model and generate a response\n    response = await model_with_tools.ainvoke([\n        SystemMessage(content=system_prompt),\n        *state[\"messages\"],\n    ], config)\n\n    print(\" \\n\\n -------------------    chat_node response\",response)\n\n    # Update messages with the response\n    messages = state[\"messages\"] + [response]\n    \n    # Handle tool calls\n    if hasattr(response, \"tool_calls\") and response.tool_calls:\n        tool_call = response.tool_calls[0]\n        \n        # Handle tool_call as a dictionary or an object\n        if isinstance(tool_call, dict):\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"name\"]\n            # Check if args is already a dict or needs to be parsed\n            if isinstance(tool_call[\"args\"], dict):\n                tool_call_args = tool_call[\"args\"]\n            else:\n                tool_call_args = json.loads(tool_call[\"args\"])\n        else:\n            # Handle as an object\n            tool_call_id = tool_call.id\n            tool_call_name = tool_call.name\n            # Check if args is already a dict or needs to be parsed\n            if isinstance(tool_call.args, dict):\n                tool_call_args = tool_call.args\n            else:\n                tool_call_args = json.loads(tool_call.args)\n\n        if tool_call_name == \"generate_recipe\":\n            # Update recipe state with tool_call_args\n            recipe_data = tool_call_args[\"recipe\"]\n            \n            # If we have an existing recipe, update it\n            if \"recipe\" in state and state[\"recipe\"] is not None:\n                recipe = state[\"recipe\"]\n                for key, value in recipe_data.items():\n                    print(\" \\n\\n -------------------    chat_node recipe_data\",key, value)\n                    if value is not None:  # Only update fields that were provided\n                        recipe[key] = value\n            else:\n                # Create a new recipe\n                recipe = {\n                    \"skill_level\": recipe_data.get(\"skill_level\", SkillLevel.BEGINNER.value),\n                    \"special_preferences\": recipe_data.get(\"special_preferences\", []),\n                    \"cooking_time\": recipe_data.get(\"cooking_time\", CookingTime.FIFTEEN_MIN.value),\n                    \"ingredients\": recipe_data.get(\"ingredients\", []),\n                    \"instructions\": recipe_data.get(\"instructions\", [])\n                }\n            \n            # Add tool response to messages\n            tool_response = {\n                \"role\": \"tool\",\n                \"content\": \"Recipe generated.\",\n                \"tool_call_id\": tool_call_id\n            }\n            \n            messages = messages + [tool_response]\n            \n            # Explicitly emit the updated state to ensure it's shared with frontend\n            state[\"recipe\"] = recipe\n            await copilotkit_emit_state(config, state)\n            \n            # Return command with updated recipe\n            return Command(\n                goto=\"start_flow\",\n                update={\n                    \"messages\": messages,\n                    \"recipe\": recipe\n                }\n            )\n    \n    # If no tool was called, just update messages and go to end\n    return Command(\n        goto=END,\n        update={\n            \"messages\": messages,\n            \"recipe\": state[\"recipe\"]\n        }\n    )\n\n\n# Define the graph\nworkflow = StateGraph(AgentState)\n\n# Add nodes\nworkflow.add_node(\"start_flow\", start_flow)\nworkflow.add_node(\"chat_node\", chat_node)\n\n# Add edges\nworkflow.set_entry_point(\"start_flow\")\nworkflow.add_edge(START, \"start_flow\")\nworkflow.add_edge(\"start_flow\", \"chat_node\")\nworkflow.add_edge(\"chat_node\", END)\n\n# Create memory saver\nmemory = MemorySaver()\n\n# Compile the graph\nshared_state_graph = workflow.compile(\n    checkpointer=memory\n)\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport { CopilotKit, useCoAgent, useCopilotChat } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nenum SkillLevel {\n  BEGINNER = \"Beginner\",\n  INTERMEDIATE = \"Intermediate\",\n  ADVANCED = \"Advanced\",\n}\n\nenum CookingTime {\n  FiveMin = \"5 min\",\n  FifteenMin = \"15 min\",\n  ThirtyMin = \"30 min\",\n  FortyFiveMin = \"45 min\",\n  SixtyPlusMin = \"60+ min\",\n}\n\nconst cookingTimeValues = [\n  { label: CookingTime.FiveMin, value: 0 },\n  { label: CookingTime.FifteenMin, value: 1 },\n  { label: CookingTime.ThirtyMin, value: 2 },\n  { label: CookingTime.FortyFiveMin, value: 3 },\n  { label: CookingTime.SixtyPlusMin, value: 4 },\n];\n\nconst dietaryOptions = [\n  \"Vegetarian\",\n  \"Nut-free\",\n  \"Dairy-free\",\n  \"Gluten-free\",\n  \"Vegan\",\n  \"Low-carb\"\n];\n\nexport default function SharedState() {\n  return (\n    <CopilotKit\n      // publicApiKey={process.env.NEXT_PUBLIC_COPILOT_CLOUD_API_KEY}\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      agent=\"shared_state\"\n    >\n      <div\n        className=\"app-container\"\n        style={{\n          backgroundImage: \"url('./shared_state_background.png')\",\n          backgroundAttachment: \"fixed\",\n        }}\n      >\n        <Recipe />\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"AI Recipe Assistant\",\n            initial: \"Hi 👋 How can I help with your recipe?\",\n          }}\n          clickOutsideToClose={false}\n        />\n      </div>\n    </CopilotKit>\n  );\n}\n\ninterface Ingredient {\n  icon: string;\n  name: string;\n  amount: string;\n}\n\ninterface Recipe {\n  title: string;\n  skill_level: SkillLevel;\n  cooking_time: CookingTime;\n  dietary_preferences: string[];\n  ingredients: Ingredient[];\n  instructions: string[];\n}\n\ninterface RecipeAgentState {\n  recipe: Recipe;\n}\n\nconst INITIAL_STATE: RecipeAgentState = {\n  recipe: {\n    title: \"Make Your Recipe\",\n    skill_level: SkillLevel.INTERMEDIATE,\n    cooking_time: CookingTime.FortyFiveMin,\n    dietary_preferences: [],\n    ingredients: [\n      { icon: \"🥕\", name: \"Carrots\", amount: \"3 large, grated\" },\n      { icon: \"🌾\", name: \"All-Purpose Flour\", amount: \"2 cups\" },\n    ],\n    instructions: [\n      \"Preheat oven to 350°F (175°C)\",\n    ],\n  },\n};\n\nfunction Recipe() {\n  const { state: agentState, setState: setAgentState } =\n    useCoAgent<RecipeAgentState>({\n      name: \"shared_state\",\n      initialState: INITIAL_STATE,\n    });\n\n  const [recipe, setRecipe] = useState(INITIAL_STATE.recipe);\n  const { appendMessage, isLoading } = useCopilotChat();\n  const [editingInstructionIndex, setEditingInstructionIndex] = useState<number | null>(null);\n  const newInstructionRef = useRef<HTMLTextAreaElement>(null);\n\n  const updateRecipe = (partialRecipe: Partial<Recipe>) => {\n    setAgentState({\n      ...agentState,\n      recipe: {\n        ...recipe,\n        ...partialRecipe,\n      },\n    });\n    setRecipe({\n      ...recipe,\n      ...partialRecipe,\n    });\n  };\n\n  const newRecipeState = { ...recipe };\n  const newChangedKeys = [];\n  const changedKeysRef = useRef<string[]>([]);\n\n  for (const key in recipe) {\n    if (\n      agentState &&\n      agentState.recipe &&\n      (agentState.recipe as any)[key] !== undefined &&\n      (agentState.recipe as any)[key] !== null\n    ) {\n      let agentValue = (agentState.recipe as any)[key];\n      const recipeValue = (recipe as any)[key];\n\n      // Check if agentValue is a string and replace \\n with actual newlines\n      if (typeof agentValue === \"string\") {\n        agentValue = agentValue.replace(/\\\\n/g, \"\\n\");\n      }\n\n      if (JSON.stringify(agentValue) !== JSON.stringify(recipeValue)) {\n        (newRecipeState as any)[key] = agentValue;\n        newChangedKeys.push(key);\n      }\n    }\n  }\n\n  if (newChangedKeys.length > 0) {\n    changedKeysRef.current = newChangedKeys;\n  } else if (!isLoading) {\n    changedKeysRef.current = [];\n  }\n\n  useEffect(() => {\n    setRecipe(newRecipeState);\n  }, [JSON.stringify(newRecipeState)]);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateRecipe({\n      title: event.target.value,\n    });\n  };\n\n  const handleSkillLevelChange = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    updateRecipe({\n      skill_level: event.target.value as SkillLevel,\n    });\n  };\n\n  const handleDietaryChange = (preference: string, checked: boolean) => {\n    if (checked) {\n      updateRecipe({\n        dietary_preferences: [...recipe.dietary_preferences, preference],\n      });\n    } else {\n      updateRecipe({\n        dietary_preferences: recipe.dietary_preferences.filter(\n          (p) => p !== preference\n        ),\n      });\n    }\n  };\n\n  const handleCookingTimeChange = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    updateRecipe({\n      cooking_time: cookingTimeValues[Number(event.target.value)].label,\n    });\n  };\n\n  \n  const addIngredient = () => {\n    // Pick a random food emoji from our valid list\n    updateRecipe({\n      ingredients: [...recipe.ingredients, { icon: \"🍴\", name: \"\", amount: \"\" }],\n    });\n  };\n\n  const updateIngredient = (index: number, field: keyof Ingredient, value: string) => {\n    const updatedIngredients = [...recipe.ingredients];\n    updatedIngredients[index] = {\n      ...updatedIngredients[index],\n      [field]: value,\n    };\n    updateRecipe({ ingredients: updatedIngredients });\n  };\n\n  const removeIngredient = (index: number) => {\n    const updatedIngredients = [...recipe.ingredients];\n    updatedIngredients.splice(index, 1);\n    updateRecipe({ ingredients: updatedIngredients });\n  };\n\n  const addInstruction = () => {\n    const newIndex = recipe.instructions.length;\n    updateRecipe({\n      instructions: [...recipe.instructions, \"\"],\n    });\n    // Set the new instruction as the editing one\n    setEditingInstructionIndex(newIndex);\n    \n    // Focus the new instruction after render\n    setTimeout(() => {\n      const textareas = document.querySelectorAll('.instructions-container textarea');\n      const newTextarea = textareas[textareas.length - 1] as HTMLTextAreaElement;\n      if (newTextarea) {\n        newTextarea.focus();\n      }\n    }, 50);\n  };\n\n  const updateInstruction = (index: number, value: string) => {\n    const updatedInstructions = [...recipe.instructions];\n    updatedInstructions[index] = value;\n    updateRecipe({ instructions: updatedInstructions });\n  };\n\n  const removeInstruction = (index: number) => {\n    const updatedInstructions = [...recipe.instructions];\n    updatedInstructions.splice(index, 1);\n    updateRecipe({ instructions: updatedInstructions });\n  };\n\n  // Simplified icon handler that defaults to a fork/knife for any problematic icons\n  const getProperIcon = (icon: string | undefined): string => {\n    // If icon is undefined  return the default\n    if (!icon) {\n      return \"🍴\";\n    }\n    \n    return icon;\n  };\n\n  return (\n    <form className=\"recipe-card\">\n      {/* Recipe Title */}\n      <div className=\"recipe-header\">\n        <input\n          type=\"text\"\n          value={recipe.title || ''}\n          onChange={handleTitleChange}\n          className=\"recipe-title-input\"\n        />\n        \n        <div className=\"recipe-meta\">\n          <div className=\"meta-item\">\n            <span className=\"meta-icon\">🕒</span>\n            <select\n              className=\"meta-select\"\n              value={cookingTimeValues.find(t => t.label === recipe.cooking_time)?.value || 3}\n              onChange={handleCookingTimeChange}\n              style={{\n                backgroundImage: 'url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 24 24\\' fill=\\'none\\' stroke=\\'%23555\\' stroke-width=\\'2\\' stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\'%3e%3cpolyline points=\\'6 9 12 15 18 9\\'%3e%3c/polyline%3e%3c/svg%3e\")',\n                backgroundRepeat: 'no-repeat',\n                backgroundPosition: 'right 0px center',\n                backgroundSize: '12px',\n                appearance: 'none',\n                WebkitAppearance: 'none'\n              }}\n            >\n              {cookingTimeValues.map((time) => (\n                <option key={time.value} value={time.value}>\n                  {time.label}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div className=\"meta-item\">\n            <span className=\"meta-icon\">🏆</span>\n            <select\n              className=\"meta-select\"\n              value={recipe.skill_level}\n              onChange={handleSkillLevelChange}\n              style={{\n                backgroundImage: 'url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 24 24\\' fill=\\'none\\' stroke=\\'%23555\\' stroke-width=\\'2\\' stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\'%3e%3cpolyline points=\\'6 9 12 15 18 9\\'%3e%3c/polyline%3e%3c/svg%3e\")',\n                backgroundRepeat: 'no-repeat',\n                backgroundPosition: 'right 0px center',\n                backgroundSize: '12px',\n                appearance: 'none',\n                WebkitAppearance: 'none'\n              }}\n            >\n              {Object.values(SkillLevel).map((level) => (\n                <option key={level} value={level}>\n                  {level}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Dietary Preferences */}\n      <div className=\"section-container relative\">\n        {changedKeysRef.current.includes(\"dietary_preferences\") && <Ping />}\n        <h2 className=\"section-title\">Dietary Preferences</h2>\n        <div className=\"dietary-options\">\n          {dietaryOptions.map((option) => (\n            <label key={option} className=\"dietary-option\">\n              <input\n                type=\"checkbox\"\n                checked={recipe.dietary_preferences.includes(option)}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleDietaryChange(option, e.target.checked)}\n              />\n              <span>{option}</span>\n            </label>\n          ))}\n        </div>\n      </div>\n\n      {/* Ingredients */}\n      <div className=\"section-container relative\">\n        {changedKeysRef.current.includes(\"ingredients\") && <Ping />}\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">Ingredients</h2>\n          <button \n            type=\"button\" \n            className=\"add-button\"\n            onClick={addIngredient}\n          >\n            + Add Ingredient\n          </button>\n        </div>\n        <div className=\"ingredients-container\">\n          {recipe.ingredients.map((ingredient, index) => (\n            <div key={index} className=\"ingredient-card\">\n              <div className=\"ingredient-icon\">{getProperIcon(ingredient.icon)}</div>\n              <div className=\"ingredient-content\">\n                <input\n                  type=\"text\"\n                  value={ingredient.name || ''}\n                  onChange={(e) => updateIngredient(index, \"name\", e.target.value)}\n                  placeholder=\"Ingredient name\"\n                  className=\"ingredient-name-input\"\n                />\n                <input\n                  type=\"text\"\n                  value={ingredient.amount || ''}\n                  onChange={(e) => updateIngredient(index, \"amount\", e.target.value)}\n                  placeholder=\"Amount\"\n                  className=\"ingredient-amount-input\"\n                />\n              </div>\n              <button \n                type=\"button\" \n                className=\"remove-button\" \n                onClick={() => removeIngredient(index)}\n                aria-label=\"Remove ingredient\"\n              >\n                ×\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Instructions */}\n      <div className=\"section-container relative\">\n        {changedKeysRef.current.includes(\"instructions\") && <Ping />}\n        <div className=\"section-header\">\n          <h2 className=\"section-title\">Instructions</h2>\n          <button \n            type=\"button\" \n            className=\"add-step-button\"\n            onClick={addInstruction}\n          >\n            + Add Step\n          </button>\n        </div>\n        <div className=\"instructions-container\">\n          {recipe.instructions.map((instruction, index) => (\n            <div key={index} className=\"instruction-item\">\n              {/* Number Circle */}\n              <div className=\"instruction-number\">\n                {index + 1}\n              </div>\n              \n              {/* Vertical Line */}\n              {index < recipe.instructions.length - 1 && (\n                <div className=\"instruction-line\" />\n              )}\n              \n              {/* Instruction Content */}\n              <div \n                className={`instruction-content ${\n                  editingInstructionIndex === index \n                    ? 'instruction-content-editing' \n                    : 'instruction-content-default'\n                }`}\n                onClick={() => setEditingInstructionIndex(index)}\n              >\n                <textarea\n                  className=\"instruction-textarea\"\n                  value={instruction || ''}\n                  onChange={(e) => updateInstruction(index, e.target.value)}\n                  placeholder={!instruction ? \"Enter cooking instruction...\" : \"\"}\n                  onFocus={() => setEditingInstructionIndex(index)}\n                  onBlur={(e) => {\n                    // Only blur if clicking outside this instruction\n                    if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget as Node)) {\n                      setEditingInstructionIndex(null);\n                    }\n                  }}\n                />\n                \n                {/* Delete Button (only visible on hover) */}\n                <button \n                  type=\"button\"\n                  className={`instruction-delete-btn ${\n                    editingInstructionIndex === index \n                      ? 'instruction-delete-btn-editing' \n                      : 'instruction-delete-btn-default'\n                  } remove-button`}\n                  onClick={(e) => {\n                    e.stopPropagation(); // Prevent triggering parent onClick\n                    removeInstruction(index);\n                  }}\n                  aria-label=\"Remove instruction\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Improve with AI Button */}\n      <div className=\"action-container\">\n        <button\n          className={isLoading ? \"improve-button loading\" : \"improve-button\"}\n          type=\"button\"\n          onClick={() => {\n            if (!isLoading) {\n              appendMessage(\n                new TextMessage({\n                  content: \"Improve the recipe\",\n                  role: Role.User,\n                })\n              );\n            }\n          }}\n          disabled={isLoading}\n        >\n          {isLoading ? \"Please Wait...\" : \"Improve with AI\"}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nfunction Ping() {\n  return (\n    <span className=\"ping-animation\">\n      <span className=\"ping-circle\"></span>\n      <span className=\"ping-dot\"></span>\n    </span>\n  );\n}",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n  background-color: #fff;\n  color: #000;\n  border-bottom: 0px;\n}\n\n/* Recipe App Styles */\n.app-container {\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  position: relative;\n  overflow: auto;\n}\n\n.recipe-card {\n  width: 90%;\n  max-width: 750px;\n  padding: 30px;\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  margin: 20px;\n  overflow: hidden;\n}\n\n/* Recipe Header */\n.recipe-header {\n  margin-bottom: 24px;\n}\n\n.recipe-title-input {\n  width: 100%;\n  font-size: 24px;\n  font-weight: bold;\n  border: none;\n  outline: none;\n  padding: 8px 0;\n  margin-bottom: 0px;\n}\n\n.recipe-meta {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-top: 5px;\n  margin-bottom: 14px;\n}\n\n.meta-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: #555;\n}\n\n.meta-icon {\n  font-size: 20px;\n  color: #777;\n}\n\n.meta-text {\n  font-size: 15px;\n}\n\n/* Recipe Meta Selects */\n.meta-item select {\n  border: none;\n  background: transparent;\n  font-size: 15px;\n  color: #555;\n  cursor: pointer;\n  outline: none;\n  padding-right: 18px;\n  transition: color 0.2s, transform 0.1s;\n  font-weight: 500;\n}\n\n.meta-item select:hover, \n.meta-item select:focus {\n  color: #FF5722;\n}\n\n.meta-item select:active {\n  transform: scale(0.98);\n}\n\n.meta-item select option {\n  color: #333;\n  background-color: white;\n  font-weight: normal;\n  padding: 8px;\n}\n\n/* Section Container */\n.section-container {\n  margin-bottom: 20px;\n  position: relative;\n}\n\n.section-title {\n  font-size: 18px;\n  margin-bottom: 14px;\n  font-weight: 600;\n  color: #333;\n  margin-top: 8px;\n}\n\n/* Dietary Preferences */\n.dietary-options {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  margin-bottom: 16px;\n}\n\n.dietary-option {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 14px;\n  cursor: pointer;\n}\n\n.dietary-option input {\n  cursor: pointer;\n}\n\n/* Ingredients */\n.ingredients-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 14px;\n  margin-bottom: 15px;\n}\n\n.ingredient-card {\n  display: flex;\n  align-items: flex-start;\n  padding: 12px;\n  background-color: #FFF9F0;\n  border-radius: 8px;\n  position: relative;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  flex: 0 1 auto;\n  min-width: 160px;\n}\n\n.ingredient-card .remove-button {\n  position: absolute;\n  right: 10px;\n  top: 10px;\n  background: none;\n  border: none;\n  color: #ccc;\n  font-size: 16px;\n  cursor: pointer;\n  display: none;\n  padding: 0;\n  width: 24px;\n  height: 24px;\n  line-height: 1;\n}\n\n.ingredient-card:hover .remove-button {\n  display: block;\n}\n\n.ingredient-icon {\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  background-color: white;\n  border-radius: 50%;\n  font-size: 16px;\n  margin-right: 12px;\n  min-width: 32px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.ingredient-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.ingredient-name-input {\n  border: none;\n  background: transparent;\n  outline: none;\n  font-weight: 500;\n  font-size: 14px;\n  width: 100%;\n  padding: 0;\n}\n\n.ingredient-amount-input {\n  border: none;\n  background: transparent;\n  outline: none;\n  font-size: 13px;\n  color: #666;\n  width: 100%;\n  padding: 0;\n}\n\n.ingredient-name-input::placeholder,\n.ingredient-amount-input::placeholder {\n  color: #aaa;\n}\n\n.remove-button {\n  background: none;\n  border: none;\n  color: #999;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 0;\n  width: 28px;\n  height: 28px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 10px;\n}\n\n.remove-button:hover {\n  color: #FF5722;\n}\n\n/* Instructions */\n.instructions-container {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  position: relative;\n  margin-bottom: 15px;\n}\n\n.instruction-step {\n  display: flex;\n  position: relative;\n  margin-bottom: 15px;\n}\n\n.step-number {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  background-color: #FF5722;\n  color: white;\n  border-radius: 50%;\n  font-weight: bold;\n  margin-right: 12px;\n  position: relative;\n  z-index: 2;\n  flex-shrink: 0;\n  font-size: 14px;\n}\n\n.instruction-step:not(:last-child)::after {\n  content: '';\n  position: absolute;\n  top: 28px;\n  left: 14px;\n  width: 2px;\n  height: calc(100% - 10px);\n  background-color: #FFE0D6;\n  z-index: 1;\n}\n\n.step-content {\n  flex-grow: 1;\n  position: relative;\n  background-color: white;\n  border: 1px solid #EEE;\n  border-radius: 8px;\n  padding: 10px 12px;\n  min-height: 20px;\n  display: flex;\n  align-items: center;\n}\n\n.instruction-text {\n  width: 100%;\n  font-size: 15px;\n  line-height: 1.5;\n  border: none;\n  outline: none;\n  background: transparent;\n  resize: none;\n  padding: 0;\n  color: #333;\n}\n\n.instruction-text::placeholder {\n  color: #aaa;\n}\n\n.step-actions {\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translateY(-50%);\n  display: none;\n}\n\n.step-content:hover .step-actions {\n  display: flex;\n  align-items: center;\n}\n\n.edit-button,\n.close-button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: #888;\n  padding: 4px;\n  font-size: 15px;\n}\n\n.edit-button {\n  margin-right: 8px;\n}\n\n.close-button {\n  font-size: 18px;\n}\n\n/* Add Buttons */\n.add-button {\n  background-color: transparent;\n  color: #FF5722;\n  border: 1px dashed #FF5722;\n  border-radius: 8px;\n  padding: 10px 16px;\n  cursor: pointer;\n  font-weight: 500;\n  display: inline-block;\n  font-size: 14px;\n  margin-bottom: 0;\n}\n\n.add-step-button {\n  background-color: transparent;\n  color: #FF5722;\n  border: 1px dashed #FF5722;\n  border-radius: 6px;\n  padding: 6px 12px;\n  cursor: pointer;\n  font-weight: 500;\n  font-size: 13px;\n}\n\n/* Section Headers */\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n\n/* Instruction Items */\n.instruction-item {\n  position: relative;\n  display: flex;\n}\n\n.instruction-number {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 22px;\n  height: 22px;\n  background-color: #FF5722;\n  color: white;\n  border-radius: 50%;\n  font-weight: bold;\n  margin-right: 12px;\n  position: relative;\n  z-index: 2;\n  flex-shrink: 0;\n  font-size: 12px;\n  margin-top: 2px;\n}\n\n.instruction-line {\n  position: absolute;\n  top: 22px;\n  left: 11px;\n  width: 1px;\n  height: calc(100% - 5px);\n  background-color: #fed7aa;\n  z-index: 1;\n}\n\n.instruction-content {\n  flex-grow: 1;\n  position: relative;\n  border-radius: 8px;\n  min-height: 26px;\n  display: flex;\n  align-items: center;\n}\n\n.instruction-content-editing {\n  background-color: white;\n  border: 1px solid #eee;\n  padding: 8px 12px;\n}\n\n.instruction-content-default {\n  background-color: transparent;\n  border: none;\n  padding: 4px 0;\n}\n\n.instruction-textarea {\n  width: 100%;\n  font-size: 14px;\n  line-height: 1.3;\n  border: none;\n  outline: none;\n  background: transparent;\n  resize: none;\n  padding: 0;\n  color: #333;\n  display: flex;\n  align-items: center;\n  margin-top: 1px;\n}\n\n.instruction-delete-btn {\n  position: absolute;\n  background: none;\n  border: none;\n  color: #ccc;\n  font-size: 16px;\n  cursor: pointer;\n  display: none;\n  padding: 0;\n  width: 24px;\n  height: 24px;\n  line-height: 1;\n}\n\n.instruction-delete-btn-editing {\n  right: 10px;\n  top: 8px;\n}\n\n.instruction-delete-btn-default {\n  right: 0;\n  top: 5px;\n}\n\n/* Action Button */\n.action-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n.improve-button {\n  background-color: #FF5722;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.improve-button:hover {\n  background-color: #E64A19;\n}\n\n.improve-button.loading {\n  background-color: #AAAAAA;\n  cursor: not-allowed;\n}\n\n/* Ping Animation */\n.ping-animation {\n  position: absolute;\n  display: flex;\n  width: 12px;\n  height: 12px;\n  top: 0;\n  right: 0;\n}\n\n.ping-circle {\n  position: absolute;\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: #38BDF8;\n  opacity: 0.75;\n  animation: ping 1.5s cubic-bezier(0, 0, 0.2, 1) infinite;\n}\n\n.ping-dot {\n  position: relative;\n  display: inline-flex;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: #0EA5E9;\n}\n\n@keyframes ping {\n  75%, 100% {\n    transform: scale(2);\n    opacity: 0;\n  }\n}\n\n/* Instruction hover effects */\n.instruction-item:hover .instruction-delete-btn {\n  display: flex !important;\n}",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🍳 Shared State Recipe Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **shared state** functionality - a powerful feature that enables bidirectional data flow between:\n1. **Frontend → Agent**: UI controls update the agent's context in real-time\n2. **Agent → Frontend**: The Copilot's recipe creations instantly update the UI components\n\nIt's like having a cooking buddy who not only listens to what you want but also updates your recipe card as you chat - no refresh needed! ✨\n\n## How to Interact\n\nMix and match any of these parameters (or none at all - it's up to you!):\n- **Skill Level**: Beginner to expert 👨‍🍳\n- **Cooking Time**: Quick meals or slow cooking ⏱️\n- **Special Preferences**: Dietary needs, flavor profiles, health goals 🥗\n- **Ingredients**: Items you want to include 🧅🥩🍄\n- **Instructions**: Any specific steps\n\nThen chat with your Copilot chef with prompts like:\n- \"I'm a beginner cook. Can you make me a quick dinner?\"\n- \"I need something spicy with chicken that takes under 30 minutes!\"\n\n## ✨ Shared State Magic in Action\n\n**What's happening technically:**\n- The UI and Copilot agent share the same state object (**Agent State = UI State**)\n- Changes from either side automatically update the other\n- Neither side needs to manually request updates from the other\n\n**What you'll see in this demo:**\n- Set cooking time to 20 minutes in the UI and watch the Copilot immediately respect your time constraint\n- Add ingredients through the UI and see them appear in your recipe\n- When the Copilot suggests new ingredients, watch them automatically appear in the UI ingredients list\n- Change your skill level and see how the Copilot adapts its instructions in real-time\n\nThis synchronized state creates a seamless experience where the agent always has your current preferences, and any updates to the recipe are instantly reflected in both places.\n\nThis shared state pattern can be applied to any application where you want your UI and Copilot to work together in perfect harmony! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "predictive_state_updates": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nA demo of predictive state updates using LangGraph.\n\"\"\"\n\nimport json\nimport uuid\nfrom typing import Dict, List, Any, Optional\n\n# LangGraph imports\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END, START\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.types import Command\n\n# CopilotKit imports\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import (\n    copilotkit_customize_config\n)\n\n# OpenAI imports\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\n\nWRITE_DOCUMENT_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"write_document\",\n        \"description\": \" \".join(\"\"\"\n            Write a document. Use markdown formatting to format the document.\n            It's good to format the document extensively so it's easy to read.\n            You can use all kinds of markdown.\n            However, do not use italic or strike-through formatting, it's reserved for another purpose.\n            You MUST write the full document, even when changing only a few words.\n            When making edits to the document, try to make them minimal - do not change every word.\n            Keep stories SHORT!\n            \"\"\".split()),\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"document\": {\n                    \"type\": \"string\",\n                    \"description\": \"The document to write\"\n                },\n            },\n        }\n    }\n}\n\n\nclass AgentState(CopilotKitState):\n    \"\"\"\n    The state of the agent.\n    \"\"\"\n    document: Optional[str] = None\n\n\nasync def start_flow(state: AgentState, config: RunnableConfig):\n    \"\"\"\n    This is the entry point for the flow.\n    \"\"\"\n    return Command(\n        goto=\"chat_node\"\n    )\n\n\nasync def chat_node(state: AgentState, config: RunnableConfig):\n    \"\"\"\n    Standard chat node.\n    \"\"\"\n    system_prompt = f\"\"\"\n    You are a helpful assistant for writing documents. \n    To write the document, you MUST use the write_document tool.\n    You MUST write the full document, even when changing only a few words.\n    When you wrote the document, DO NOT repeat it as a message. \n    Just briefly summarize the changes you made. 2 sentences max.\n    This is the current state of the document: ----\\n {state.get('document')}\\n-----\n    \"\"\"\n\n    # Define the model\n    model = ChatOpenAI(model=\"gpt-4o\")\n    \n    # Define config for the model with emit_intermediate_state to stream tool calls to frontend\n    if config is None:\n        config = RunnableConfig(recursion_limit=25)\n    \n    # Use CopilotKit's custom config to set up streaming for the write_document tool\n    # This is equivalent to copilotkit_predict_state in the CrewAI version\n    config = copilotkit_customize_config(\n        config,\n        emit_intermediate_state=[{\n            \"state_key\": \"document\",\n            \"tool\": \"write_document\",\n            \"tool_argument\": \"document\",\n        }],\n    )\n\n    # Bind the tools to the model\n    model_with_tools = model.bind_tools(\n        [\n            *state[\"copilotkit\"][\"actions\"],\n            WRITE_DOCUMENT_TOOL\n        ],\n        # Disable parallel tool calls to avoid race conditions\n        parallel_tool_calls=False,\n    )\n\n    # Run the model to generate a response\n    response = await model_with_tools.ainvoke([\n        SystemMessage(content=system_prompt),\n        *state[\"messages\"],\n    ], config)\n\n    # Update messages with the response\n    messages = state[\"messages\"] + [response]\n    \n    # Extract any tool calls from the response\n    if hasattr(response, \"tool_calls\") and response.tool_calls:\n        tool_call = response.tool_calls[0]\n        \n        # Handle tool_call as a dictionary or an object\n        if isinstance(tool_call, dict):\n            tool_call_id = tool_call[\"id\"]\n            tool_call_name = tool_call[\"name\"]\n            tool_call_args = tool_call[\"args\"]\n        else:\n            # Handle as an object (backward compatibility)\n            tool_call_id = tool_call.id\n            tool_call_name = tool_call.name\n            tool_call_args = tool_call.args\n\n        if tool_call_name == \"write_document\":\n            # Add the tool response to messages\n            tool_response = {\n                \"role\": \"tool\",\n                \"content\": \"Document written.\",\n                \"tool_call_id\": tool_call_id\n            }\n            \n            # Add confirmation tool call\n            confirm_tool_call = {\n                \"role\": \"assistant\",\n                \"content\": \"\",\n                \"tool_calls\": [{\n                    \"id\": str(uuid.uuid4()),\n                    \"function\": {\n                        \"name\": \"confirm_changes\",\n                        \"arguments\": \"{}\"\n                    }\n                }]\n            }\n            \n            messages = messages + [tool_response, confirm_tool_call]\n            \n            # Return Command to route to end\n            return Command(\n                goto=END,\n                update={\n                    \"messages\": messages,\n                    \"document\": tool_call_args[\"document\"]\n                }\n            )\n    \n    # If no tool was called, go to end\n    return Command(\n        goto=END,\n        update={\n            \"messages\": messages\n        }\n    )\n\n\n# Define the graph\nworkflow = StateGraph(AgentState)\n\n# Add nodes\nworkflow.add_node(\"start_flow\", start_flow)\nworkflow.add_node(\"chat_node\", chat_node)\n\n# Add edges\nworkflow.set_entry_point(\"start_flow\")\nworkflow.add_edge(START, \"start_flow\")\nworkflow.add_edge(\"start_flow\", \"chat_node\")\nworkflow.add_edge(\"chat_node\", END)\n\n# Create memory saver\nmemory = MemorySaver()\n\n# Compile the graph\npredictive_state_updates_graph = workflow.compile(\n    checkpointer=memory\n)\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nimport MarkdownIt from \"markdown-it\";\n\nimport { diffWords } from \"diff\";\nimport { useEditor, EditorContent } from \"@tiptap/react\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport { useEffect, useState } from \"react\";\nimport {\n  CopilotKit,\n  useCoAgent,\n  useCopilotAction,\n  useCopilotChat,\n} from \"@copilotkit/react-core\";\nimport { CopilotSidebar } from \"@copilotkit/react-ui\";\n\nconst extensions = [StarterKit];\n\nexport default function PredictiveStateUpdates() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_COPILOT_CLOUD_API_KEY}\n      showDevConsole={false}\n      agent=\"predictive_state_updates\"\n    >\n      <div\n        className=\"min-h-screen w-full\"\n        style={\n          {\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as React.CSSProperties\n        }\n      >\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"AI Document Editor\",\n            initial: \"Hi 👋 How can I help with your document?\",\n          }}\n          clickOutsideToClose={false}\n        >\n          <DocumentEditor />\n        </CopilotSidebar>\n      </div>\n    </CopilotKit>\n  );\n}\n\ninterface AgentState {\n  document: string;\n}\n\nconst DocumentEditor = () => {\n  const editor = useEditor({\n    extensions,\n    immediatelyRender: false,\n    editorProps: {\n      attributes: { class: \"min-h-screen p-10\" },\n    },\n  });\n  const [placeholderVisible, setPlaceholderVisible] = useState(false);\n  const [currentDocument, setCurrentDocument] = useState(\"\");\n  const { isLoading } = useCopilotChat();\n\n  const {\n    state: agentState,\n    setState: setAgentState,\n    nodeName,\n  } = useCoAgent<AgentState>({\n    name: \"predictive_state_updates\",\n    initialState: {\n      document: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      setCurrentDocument(editor?.getText() || \"\");\n    }\n    editor?.setEditable(!isLoading);\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (nodeName == \"end\") {\n      // set the text one final time when loading is done\n      if (\n        currentDocument.trim().length > 0 &&\n        currentDocument !== agentState?.document\n      ) {\n        const newDocument = agentState?.document || \"\";\n        const diff = diffPartialText(currentDocument, newDocument, true);\n        const markdown = fromMarkdown(diff);\n        editor?.commands.setContent(markdown);\n      }\n    }\n  }, [nodeName]);\n\n  useEffect(() => {\n    if (isLoading) {\n      if (currentDocument.trim().length > 0) {\n        const newDocument = agentState?.document || \"\";\n        const diff = diffPartialText(currentDocument, newDocument);\n        const markdown = fromMarkdown(diff);\n        editor?.commands.setContent(markdown);\n      } else {\n        const markdown = fromMarkdown(agentState?.document || \"\");\n        editor?.commands.setContent(markdown);\n      }\n    }\n  }, [agentState?.document]);\n\n  const text = editor?.getText() || \"\";\n\n  useEffect(() => {\n    setPlaceholderVisible(text.length === 0);\n\n    if (!isLoading) {\n      setCurrentDocument(text);\n      setAgentState({\n        document: text,\n      });\n    }\n  }, [text]);\n\n  useCopilotAction({\n    name: \"confirm_changes\",\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      const [accepted, setAccepted] = useState<boolean | null>(null);\n      return (\n        <div className=\"bg-white p-6 rounded shadow-lg border border-gray-200 mt-5 mb-5\">\n          <h2 className=\"text-lg font-bold mb-4\">Confirm Changes</h2>\n          <p className=\"mb-6\">Do you want to accept the changes?</p>\n          {accepted === null && (\n            <div className=\"flex justify-end space-x-4\">\n              <button\n                className={`bg-gray-200 text-black py-2 px-4 rounded disabled:opacity-50 ${\n                  status === \"executing\" ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n                disabled={status !== \"executing\"}\n                onClick={() => {\n                  if (respond) {\n                    setAccepted(false);\n                    editor?.commands.setContent(fromMarkdown(currentDocument));\n                    setAgentState({\n                      document: currentDocument,\n                    });\n                    respond({ accepted: false });\n                  }\n                }}\n              >\n                Reject\n              </button>\n              <button\n                className={`bg-black text-white py-2 px-4 rounded disabled:opacity-50 ${\n                  status === \"executing\" ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n                disabled={status !== \"executing\"}\n                onClick={() => {\n                  if (respond) {\n                    setAccepted(true);\n                    editor?.commands.setContent(\n                      fromMarkdown(agentState?.document || \"\")\n                    );\n                    setCurrentDocument(agentState?.document || \"\");\n                    setAgentState({\n                      document: agentState?.document || \"\",\n                    });\n                    respond({ accepted: true });\n                  }\n                }}\n              >\n                Confirm\n              </button>\n            </div>\n          )}\n          {accepted !== null && (\n            <div className=\"flex justify-end\">\n              <div className=\"mt-4 bg-gray-200 text-black py-2 px-4 rounded inline-block\">\n                {accepted ? \"✓ Accepted\" : \"✗ Rejected\"}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    },\n  });\n\n  return (\n    <div className=\"relative min-h-screen w-full\">\n      {placeholderVisible && (\n        <div className=\"absolute top-6 left-6 m-4 pointer-events-none text-gray-400\">\n          Your content goes here...\n        </div>\n      )}\n      <EditorContent editor={editor} />\n    </div>\n  );\n};\n\nfunction fromMarkdown(text: string) {\n  const md = new MarkdownIt({\n    typographer: true,\n    html: true,\n  });\n\n  return md.render(text);\n}\n\nfunction diffPartialText(\n  oldText: string,\n  newText: string,\n  isComplete: boolean = false\n) {\n  let oldTextToCompare = oldText;\n  if (oldText.length > newText.length && !isComplete) {\n    // make oldText shorter\n    oldTextToCompare = oldText.slice(0, newText.length);\n  }\n\n  const changes = diffWords(oldTextToCompare, newText);\n\n  let result = \"\";\n  changes.forEach((part) => {\n    if (part.added) {\n      result += `<em>${part.value}</em>`;\n    } else if (part.removed) {\n      result += `<s>${part.value}</s>`;\n    } else {\n      result += part.value;\n    }\n  });\n\n  if (oldText.length > newText.length && !isComplete) {\n    result += oldText.slice(newText.length);\n  }\n\n  return result;\n}\n\nfunction isAlpha(text: string) {\n  return /[a-zA-Z\\u00C0-\\u017F]/.test(text.trim());\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": "/* Basic editor styles */\n.tiptap-container {\n  height: 100vh; /* Full viewport height */\n  width: 100vw; /* Full viewport width */\n  display: flex;\n  flex-direction: column;\n}\n\n.tiptap {\n  flex: 1; /* Take up remaining space */\n  overflow: auto; /* Allow scrolling if content overflows */\n}\n\n.tiptap :first-child {\n  margin-top: 0;\n}\n\n/* List styles */\n.tiptap ul,\n.tiptap ol {\n  padding: 0 1rem;\n  margin: 1.25rem 1rem 1.25rem 0.4rem;\n}\n\n.tiptap ul li p,\n.tiptap ol li p {\n  margin-top: 0.25em;\n  margin-bottom: 0.25em;\n}\n\n/* Heading styles */\n.tiptap h1,\n.tiptap h2,\n.tiptap h3,\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  line-height: 1.1;\n  margin-top: 2.5rem;\n  text-wrap: pretty;\n  font-weight: bold;\n}\n\n.tiptap h1,\n.tiptap h2,\n.tiptap h3,\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  margin-top: 3.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.tiptap p {\n  margin-bottom: 1rem;\n}\n\n.tiptap h1 {\n  font-size: 1.4rem;\n}\n\n.tiptap h2 {\n  font-size: 1.2rem;\n}\n\n.tiptap h3 {\n  font-size: 1.1rem;\n}\n\n.tiptap h4,\n.tiptap h5,\n.tiptap h6 {\n  font-size: 1rem;\n}\n\n/* Code and preformatted text styles */\n.tiptap code {\n  background-color: var(--purple-light);\n  border-radius: 0.4rem;\n  color: var(--black);\n  font-size: 0.85rem;\n  padding: 0.25em 0.3em;\n}\n\n.tiptap pre {\n  background: var(--black);\n  border-radius: 0.5rem;\n  color: var(--white);\n  font-family: \"JetBrainsMono\", monospace;\n  margin: 1.5rem 0;\n  padding: 0.75rem 1rem;\n}\n\n.tiptap pre code {\n  background: none;\n  color: inherit;\n  font-size: 0.8rem;\n  padding: 0;\n}\n\n.tiptap blockquote {\n  border-left: 3px solid var(--gray-3);\n  margin: 1.5rem 0;\n  padding-left: 1rem;\n}\n\n.tiptap hr {\n  border: none;\n  border-top: 1px solid var(--gray-2);\n  margin: 2rem 0;\n}\n\n.tiptap s {\n  background-color: #f9818150;\n  padding: 2px;\n  font-weight: bold;\n  color: rgba(0, 0, 0, 0.7);\n}\n\n.tiptap em {\n  background-color: #b2f2bb;\n  padding: 2px;\n  font-weight: bold;\n  font-style: normal;\n}\n\n.copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n  background-color: #fff;\n  color: #000;\n  border-bottom: 0px;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 📝 Predictive State Updates Document Editor\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **predictive state updates** for real-time document collaboration:\n1. **Live Document Editing**: Watch as your Copilot makes changes to a document in real-time\n2. **Diff Visualization**: See exactly what's being changed as it happens\n3. **Streaming Updates**: Changes are displayed character-by-character as the Copilot works\n\n## How to Interact\n\nTry these interactions with the collaborative document editor:\n- \"Fix the grammar and typos in this document\"\n- \"Make this text more professional\"\n- \"Add a section about [topic]\"\n- \"Summarize this content in bullet points\"\n- \"Change the tone to be more casual\"\n\nWatch as the Copilot processes your request and edits the document in real-time right before your eyes.\n\n## ✨ Predictive State Updates in Action\n\n**What's happening technically:**\n- The document state is shared between your UI and the Copilot\n- As the Copilot generates content, changes are streamed to the UI\n- Each modification is visualized with additions and deletions\n- The UI renders these changes progressively, without waiting for completion\n- All edits are tracked and displayed in a visually intuitive way\n\n**What you'll see in this demo:**\n- Text changes are highlighted in different colors (green for additions, red for deletions)\n- The document updates character-by-character, creating a typing-like effect\n- You can see the Copilot's thought process as it refines the content\n- The final document seamlessly incorporates all changes\n- The experience feels collaborative, as if someone is editing alongside you\n\nThis pattern of real-time collaborative editing with diff visualization is perfect for document editors, code review tools, content creation platforms, or any application where users benefit from seeing exactly how content is being transformed! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  },
  "tool_based_generative_ui": {
    "files": [
      {
        "name": "agent.py",
        "content": "\"\"\"\nAn example demonstrating tool-based generative UI using LangGraph.\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional\n\n# LangGraph imports\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.graph import StateGraph, END, START\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.types import Command\n\n# CopilotKit imports\nfrom copilotkit import CopilotKitState\nfrom copilotkit.langgraph import copilotkit_customize_config\n\n# OpenAI imports\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage\n\n\n# This tool generates a haiku on the server.\n# The tool call will be streamed to the frontend as it is being generated.\nGENERATE_HAIKU_TOOL = {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"generate_haiku\",\n        \"description\": \"Generate a haiku in Japanese and its English translation\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"japanese\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"An array of three lines of the haiku in Japanese\"\n                },\n                \"english\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"description\": \"An array of three lines of the haiku in English\"\n                }\n            },\n            \"required\": [\"japanese\", \"english\"]\n        }\n    }\n}\n\n\nasync def chat_node(state: CopilotKitState, config: RunnableConfig):\n    \"\"\"\n    The main function handling chat and tool calls.\n    \"\"\"\n    system_prompt = \"You assist the user in generating a haiku.\"\n\n    # Define the model\n    model = ChatOpenAI(model=\"gpt-4o\")\n    \n    # Define config for the model\n    if config is None:\n        config = RunnableConfig(recursion_limit=25)\n    \n    # Use CopilotKit's custom config to set up streaming\n    config = copilotkit_customize_config(config)\n\n    # Bind the tools to the model\n    model_with_tools = model.bind_tools(\n        [GENERATE_HAIKU_TOOL],\n        # Disable parallel tool calls to avoid race conditions\n        parallel_tool_calls=False,\n    )\n\n    # Run the model to generate a response\n    response = await model_with_tools.ainvoke([\n        SystemMessage(content=system_prompt),\n        *state[\"messages\"],\n    ], config)\n\n    # Return Command to end with updated messages\n    return Command(\n        goto=END,\n        update={\n            \"messages\": state[\"messages\"] + [response]\n        }\n    )\n\n# Define the graph\nworkflow = StateGraph(CopilotKitState)\n\n# Add nodes\nworkflow.add_node(\"chat_node\", chat_node)\n\n# Add edges\nworkflow.set_entry_point(\"chat_node\")\nworkflow.add_edge(START, \"chat_node\")\nworkflow.add_edge(\"chat_node\", END)\n\n# Create memory saver\nmemory = MemorySaver()\n\n# Compile the graph\ntool_based_generative_ui_graph = workflow.compile(\n    checkpointer=memory\n)\n\n",
        "path": "agent.py",
        "language": "python"
      },
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotKitCSSProperties, CopilotSidebar } from \"@copilotkit/react-ui\";\nimport { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\n\nexport default function AgenticChat() {\n  return (\n    <CopilotKit\n      publicApiKey={process.env.NEXT_PUBLIC_COPILOT_CLOUD_API_KEY}\n      showDevConsole={false}\n      agent=\"tool_based_generative_ui\"\n    >\n      <div\n        className=\"min-h-full w-full flex items-center justify-center\"\n        style={\n          {\n            \"--copilot-kit-primary-color\": \"#222\",\n            \"--copilot-kit-separator-color\": \"#CCC\",\n          } as CopilotKitCSSProperties\n        }\n      >\n        <Haiku />\n        <CopilotSidebar\n          defaultOpen={true}\n          labels={{\n            title: \"Haiku Generator\",\n            initial: \"I'm a haiku generator 👋. How can I help you?\",\n          }}\n          clickOutsideToClose={false}\n        />\n      </div>\n    </CopilotKit>\n  );\n}\n\nfunction Haiku() {\n  const [haiku, setHaiku] = useState<{\n    japanese: string[];\n    english: string[];\n  }>({\n    japanese: [\"仮の句よ\", \"まっさらながら\", \"花を呼ぶ\"],\n    english: [\n      \"A placeholder verse—\",\n      \"even in a blank canvas,\",\n      \"it beckons flowers.\",\n    ],\n  });\n\n  useCopilotAction({\n    name: \"generate_haiku\",\n    parameters: [\n      {\n        name: \"japanese\",\n        type: \"string[]\",\n      },\n      {\n        name: \"english\",\n        type: \"string[]\",\n      },\n    ],\n    followUp: false,\n    handler: async () => {\n      return \"Haiku generated.\";\n    },\n    render: ({ args: generatedHaiku, result, status }) => {\n      const [isApplied, setIsApplied] = useState(false);\n      if (\n        !generatedHaiku ||\n        !generatedHaiku.japanese ||\n        !generatedHaiku.japanese.length\n      ) {\n        return <></>;\n      }\n\n      return (\n        <div className=\"text-left rounded-md p-4 mt-4 mb-4 flex flex-col bg-gray-100\">\n          <div\n            className={\n              status === \"complete\" ? \"border-b border-gray-300 mb-4\" : \"\"\n            }\n          >\n            {generatedHaiku?.japanese?.map((line, index) => (\n              <div className=\"flex items-center gap-3 mb-2 pb-2\" key={index}>\n                <p className=\"text-lg font-bold\">{line}</p>\n                <p className=\"text-sm font-light\">\n                  {generatedHaiku?.english?.[index]}\n                </p>\n              </div>\n            ))}\n          </div>\n          {status === \"complete\" && (\n            <button\n              onClick={() => {\n                setHaiku(generatedHaiku);\n                setIsApplied(true);\n              }}\n              className=\"ml-auto px-3 py-1 bg-white text-black text-sm rounded cursor-pointer font-sm border \"\n            >\n              {isApplied ? \"Applied ✓\" : \"Apply\"}\n            </button>\n          )}\n        </div>\n      );\n    },\n  });\n  return (\n    <>\n      <div className=\"text-left\">\n        {haiku?.japanese.map((line, index) => (\n          <div className=\"flex items-center gap-6 mb-2\" key={index}>\n            <p className=\"text-4xl font-bold text-gray-500\">{line}</p>\n            <p className=\"text-base font-light\">{haiku?.english?.[index]}</p>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitWindow {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.copilotKitHeader {\n  border-top-left-radius: 5px !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🪶 Tool-Based Generative UI Haiku Creator\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **tool-based generative UI** capabilities:\n1. **Frontend Rendering of Tool Calls**: Backend tool calls are automatically rendered in the UI\n2. **Dynamic UI Generation**: The UI updates in real-time as the agent generates content\n3. **Elegant Content Presentation**: Complex structured data (haikus) are beautifully displayed\n\n## How to Interact\n\nChat with your Copilot and ask for haikus about different topics:\n- \"Create a haiku about nature\"\n- \"Write a haiku about technology\"\n- \"Generate a haiku about the changing seasons\"\n- \"Make a humorous haiku about programming\"\n\nEach request will trigger the agent to generate a haiku and display it in a visually appealing card format in the UI.\n\n## ✨ Tool-Based Generative UI in Action\n\n**What's happening technically:**\n- The agent processes your request and determines it should create a haiku\n- It calls a backend tool that returns structured haiku data\n- CopilotKit automatically renders this tool call in the frontend\n- The rendering is handled by the registered tool component in your React app\n- No manual state management is required to display the results\n\n**What you'll see in this demo:**\n- As you request a haiku, a beautifully formatted card appears in the UI\n- The haiku follows the traditional 5-7-5 syllable structure\n- Each haiku is presented with consistent styling\n- Multiple haikus can be generated in sequence\n- The UI adapts to display each new piece of content\n\nThis pattern of tool-based generative UI can be extended to create any kind of dynamic content - from data visualizations to interactive components, all driven by your Copilot's tool calls! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ]
  }
}